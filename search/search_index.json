{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Profilage des chauffeurs","text":""},{"location":"#membres-du-groupe","title":"Membres du groupe","text":"<p>Membres du groupe</p> <ul> <li>Abdellatif BELMADY</li> <li>Fatine BOUSSATTINE</li> <li>Hamza HAJJINI</li> <li>Hamza Dribine</li> <li>Mohamed Ait Hajjoub</li> </ul>"},{"location":"#importer-les-packages","title":"Importer les packages","text":"<pre><code>library(sf)           # manipulation des donn\u00e9es spatiales\nlibrary(osmdata)      # extraction des donn\u00e9es OpenStreetMap\nlibrary(leaflet)      # visualisation interactive avec leaflet\nlibrary(mapsf)        # cartographie statistique\nlibrary(lubridate)    # manipulation des dates\nlibrary(tidyverse)    # m\u00e9ta-package d'Hadley Wickham\n</code></pre> <p>getwd()</p> <p><code>getwd()</code> est une fonction qui permet de r\u00e9cup\u00e9rer le chemin absolu du r\u00e9pertoire de travail actuel.</p> <pre><code>getwd()\n</code></pre> Output <p>[1] \"C:/Users/abdel/Documents\"</p>"},{"location":"#importer-la-data","title":"Importer la data","text":"<p>Importer la data</p> <ul> <li> <p>Le premier fichier, <code>casabound.geojson</code>, est lu \u00e0 l'aide de la fonction st_read() de la biblioth\u00e8que sf. Cette fonction est utilis\u00e9e pour lire des fichiers de donn\u00e9es spatiales tels que des fichiers shapefile, des fichiers GeoJSON, etc. Ici, il lit un fichier GeoJSON nomm\u00e9 \"casabound.geojson\" et stocke les donn\u00e9es dans un objet nomm\u00e9 casaBound.</p> </li> <li> <p>Le deuxi\u00e8me fichier, <code>heetchmarchcrop.Rds</code>, est lu \u00e0 l'aide de la fonction readRDS(). Cette fonction est utilis\u00e9e pour lire des fichiers de donn\u00e9es R sauvegard\u00e9s en utilisant la fonction saveRDS(). Ici, il lit un fichier RDS nomm\u00e9 heetchmarchcrop.Rds et stocke les donn\u00e9es dans un objet nomm\u00e9 heetchPoints.</p> </li> <li> <p>Le troisi\u00e8me fichier, <code>osmfeatures.Rds</code>, est \u00e9galement lu \u00e0 l'aide de la fonction readRDS(). Comme le deuxi\u00e8me fichier, il s'agit d'un fichier RDS et est lu dans un objet nomm\u00e9 osmFeatures.</p> </li> </ul> <pre><code>casaBound &lt;- st_read(\"DATA/casabound.geojson\")\nheetchPoints &lt;- readRDS(\"DATA/heetchmarchcrop.Rds\")\nosmFeatures &lt;- readRDS(\"DATA/osmfeatures.Rds\")\n</code></pre> Output <p></p>"},{"location":"#definir-la-problematique","title":"D\u00e9finir la probl\u00e9matique","text":"<p>Probl\u00e9matique</p> <p>A travers ce travail, nous cherchons \u00e0 identifier les conducteurs qui respectent les r\u00e8gles de conduite et \u00e0 \u00e9valuer leur s\u00e9curit\u00e9 sur la route, pour ce faire, nous nous concentrerons sur le calcul de la vitesse moyenne des conducteurs.</p>"},{"location":"#resoudre-la-problematique","title":"R\u00e9soudre la probl\u00e9matique","text":"<p>Nombre de chauffeurs</p> <p>Ce code R <code>length(unique(heetchPoints$driver_id))</code> calcule le nombre de valeurs uniques dans la colonne driver_id de l'objet heetchPoints.</p> <p>La fonction unique() est utilis\u00e9e pour extraire les valeurs uniques de la colonne driver_id. Ensuite, la fonction length() est utilis\u00e9e pour renvoyer le nombre d'\u00e9l\u00e9ments dans le vecteur r\u00e9sultant.</p> Nombre de chauffeurs<pre><code>length(unique(heetchPoints$driver_id))\n</code></pre> Output <p>[1] 1309</p> <p>D\u00e9fenir la fonction qui calcul la moyenne des vitesses d'un chauffeur sur un jour</p> <p>Le code R pr\u00e9sent\u00e9 ci-dessous est une fonction appel\u00e9e <code>my_function</code>, qui prend un argument id_driver. La fonction effectue les op\u00e9rations suivantes:</p> <ol> <li> <p>Initialise une variable i \u00e0 z\u00e9ro.</p> </li> <li> <p>Affiche la valeur de i.</p> </li> <li> <p>Filtre la table heetchPoints en fonction de la valeur id_driver.</p> </li> <li> <p>Trier la table driver en fonction de la colonne location_at_local_time.</p> </li> <li> <p>Effectue une projection de la table driver_tri dans une projection cartographique sp\u00e9cifique (crs = 26191).</p> </li> <li> <p>Calcule les distances entre tous les points dans la table driver_tri \u00e0 l'aide de la fonction st_distance.</p> </li> <li> <p>Calcule la diff\u00e9rence de temps entre chaque deux points cons\u00e9cutifs dans la table driver_tri \u00e0 l'aide de la fonction difftime.</p> </li> <li> <p>Filtre la table driver_tri pour conserver uniquement les points ayant une diff\u00e9rence de temps entre 0.016 et 0.025 heures.</p> </li> <li> <p>Calcule la vitesse entre chaque deux points successifs en divisant la distance sur le temps.</p> </li> <li> <p>Filtre la table driver_tri_2 pour ne conserver que les points ayant une vitesse entre 6 et 120 km/h.</p> </li> <li> <p>Retourne la moyenne des vitesses de la table driver_tri_3.</p> </li> </ol> D\u00e9fenir la fonction qui calcul la moyenne des vitesses d'un chauffeur sur un jour<pre><code>i = 0\nmy_function &lt;- function (id_driver){\ni=i+1\nprint(i)\ndriver &lt;- heetchPoints %&gt;% filter(driver_id == id_driver) # Prendre le premier jour + classer par location_at_local_time\n#  jour &lt;- driver %&gt;% \n#   filter(substr(driver$location_at_local_time, start = 9, stop = 10) == \"01\")\n#plot(driver$geometry, border = \"red\", lwd = 2)\n#  time_tri &lt;- order(jour$location_at_local_time)\n# jour_tri &lt;- jour[time_tri,]\n#Triage temporel de la table driver \ndriver_tri_index &lt;- order(driver$location_at_local_time)\ndriver_tri &lt;- driver[driver_tri_index,]\n# Projection des points\ndriver_tri &lt;- st_transform(x = driver_tri, crs = 26191)\n# Calculons les distances entres tous les points\nn &lt;- nrow(driver_tri)  n\nlist_distance &lt;- list()\nfor( i in 1:(n-1)){\ndistance &lt;- st_distance(x = driver_tri[i, ],\ny = driver_tri[i+1, ],\nby_element = TRUE)\nunits(distance) &lt;- \"km\"\nlist_distance &lt;- append (list_distance, list(distance))\n}\nlength (list_distance)\nlist_distance &lt;- c(0, list_distance)\ndriver_tri$distdiff &lt;- list_distance\nlist_time &lt;- list()\nfor( i in 1:(n-1)){\ndate_point1 &lt;- driver_tri$location_at_local_time[i]\ndate_point2 &lt;- driver_tri$location_at_local_time[i+1]\ndiff?rence &lt;- difftime(date_point2, date_point1, units = \"hours\")\nlist_time &lt;- append (list_time, list(diff?rence))\n}\nlist_time &lt;- c(0, list_time)\ndriver_tri$timediff &lt;- list_time\n#Calculons la liste des vitesse entre chaque deux points successifs en divisant la distance sur le temps\ndriver_tri_2 &lt;- driver_tri[driver_tri$timediff &gt; 0.016 &amp; driver_tri$timediff &lt; 0.025, ]\nclass(driver_tri_2$distdiff)\nclass(driver_tri_2$timediff)\ndriver_tri_2$distdiff &lt;- as.numeric(driver_tri_2$distdiff)\ndriver_tri_2$timediff &lt;- as.numeric(driver_tri_2$timediff)\ndriver_tri_2$vitesse &lt;- driver_tri_2$distdiff / driver_tri_2$timediff\ndriver_tri_3 &lt;- driver_tri_2[driver_tri_2$vitesse &gt;= 6 &amp; driver_tri_2$vitesse &lt;= 120, ]\nreturn (mean(driver_tri_3$vitesse))\n}\n</code></pre> <p>Calculons la moyenne des vitesse de tous les chauffeurs</p> <p>Le code ci-dessous commence par cr\u00e9er un objet de type data.frame appel\u00e9 vitesse_table \u00e0 l'aide de la fonction data.frame().</p> <p>Ensuite, la boucle for est utilis\u00e9e pour it\u00e9rer sur une liste de trois valeurs de l'ID de conducteur driver_id comprises entre 10 et 12 inclusivement.</p> <p>\u00c0 chaque it\u00e9ration, le code cr\u00e9e une liste driver_list avec deux \u00e9l\u00e9ments : le premier est l'ID du conducteur et le deuxi\u00e8me est le r\u00e9sultat de la fonction my_function() avec l'ID du conducteur en argument.</p> <p>Enfin, la fonction rbind() est utilis\u00e9e pour ajouter la liste driver_list en tant que nouvelle ligne \u00e0 la fin du data.frame vitesse_table.</p> <p>Ainsi, \u00e0 la fin de la boucle for, vitesse_table contiendra une liste de conducteurs avec leurs ID et la valeur de la vitesse obtenue \u00e0 l'aide de la fonction my_function().</p> Calculons la moyenne des vitesse de tous les chauffeurs<pre><code>vitesse_table &lt;- data.frame()\nfor (driver_id in unique(heetchPoints$driver_id)[10:12]){\ndriver_list &lt;- list(driver_id, my_function (driver_id))\nvitesse_table &lt;- rbind(vitesse_table, driver_list)\n}\n</code></pre>"}]}